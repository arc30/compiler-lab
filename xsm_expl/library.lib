MOV R1, SP
MOV R2, 5
SUB R1, R2
MOV R2, "Write"
MOV R1, [R1]
EQ R1, R2
JZ R1, 64
MOV R1, SP
MOV R2, 4
SUB R1, R2
MOV R2, [R1]
ADD R1, 1
MOV R3, [R1]
ADD R1, 1
MOV R4, [R1]
MOV R5, 5
PUSH R5
PUSH R2
PUSH R3
PUSH R4
PUSH R5
INT 7
POP R1
POP R2
POP R2
POP R2
POP R2
MOV R2, SP
MOV R3, 1
SUB R2, R3
MOV [R2], R1
RET

MOV R1, SP	
MOV R2, 5
SUB R1, R2
MOV R2, "Read"
MOV R1, [R1]
EQ R1, R2
JZ R1, 128
MOV R1, SP
MOV R2, 4
SUB R1, R2
MOV R2, [R1]
ADD R1, 1
MOV R3, [R1]
ADD R1, 1
MOV R4, [R1]
MOV R5, 7
PUSH R5
PUSH R2
PUSH R3
PUSH R4
PUSH R5
INT 6
POP R1
POP R2
POP R2
POP R2
POP R2
MOV R2, SP
MOV R3, 1
SUB R2, R3
MOV [R2], R1
RET

MOV R1, SP
MOV R2, 5
SUB R1, R2  
MOV R2, "Heapset"
MOV R1, [R1]
EQ R1, R2
JZ R1, addr_of_alloc
MOV R0, 1024
MOV R1, 2048
l1: MOV R3, R0
LT R3, R1
JZ R3, init_end
MOV R2, R0
ADD R2, 8
MOV [R0], R2
ADD R0, 8
JMP l1:
init_end: MOV R1, -1
MOV [2040], R1
MOV R2, SP
MOV R3, 1
SUB R2, R3
MOV [R2],0
RET

addr_of_alloc
MOV R1, SP
MOV R2, 5
SUB R1, R2  
MOV R2, "Alloc"
MOV R1, [R1]
EQ R1, R2
JZ R1, addr_of_free

MOV R0, SP
MOV R1, 4
SUB R0, R1
MOV R0, [R0]
MOV R1, 8
LT R0, R1
JZ R0, alloc_fail

MOV R0, [1024]
MOV R1, -1
EQ R0, R1
JZ R0, not_ful:
alloc_fail:
MOV R1, 1
MOV R2, SP
SUB R2, R1
MOV [R2], -1
RET

not_ful:
MOV R0, [1024]
MOV R1, [R0]
MOV [1024], R1
MOV R1, 1
MOV R2, SP
SUB R2, R1
MOV [R2], R0
RET

addr_of_free:
MOV R0, SP
MOV R1, 5
SUB R0, R1
MOV R1, "Free"
MOV RO, [R0]
EQ R0, R1
JZ R0 addr_of_exit
MOV R0, SP
MOV R1, 4
SUB R0, R1
MOV R0, [R0]    //ARG1
MOV R1, [1024]    //VAL IN RESERVED
MOV [1024], R0
MOV [R0], R1
MOV R2, SP
MOV R3, 1
SUB R2, R3
MOV [R2],0
RET

addr_of_exit:
MOV R1, SP	
MOV R2, 1
SUB R1, R2
MOV R2, "Exit"
MOV R1, [R1]
EQ R1, R2
JZ R1, 148
MOV R1, 10
PUSH R1
INT 10
RET



